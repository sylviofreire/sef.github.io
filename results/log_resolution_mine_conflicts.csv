/home/paper219/Desktop/analysis/demonstration/projects/Mybatis-3/revisions/rev_b195e2e_5d213fc/rev_b195e2e-5d213fc/src/test/java/org/apache/ibatis/submitted/ancestor_ref/Reputation.java;<<<<<<< MINE
=======
/**
 *    Copyright 2009-2016 the original author or authors.
 *
 *    Licensed under the Apache License, Version 2.0 (the "License");
 *    you may not use this file except in compliance with the License.
 *    You may obtain a copy of the License at
 *
 *       http://www.apache.org/licenses/LICENSE-2.0
 *
 *    Unless required by applicable law or agreed to in writing, software
 *    distributed under the License is distributed on an "AS IS" BASIS,
 *    WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
 *    See the License for the specific language governing permissions and
 *    limitations under the License.
 */
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Fastjson/revisions/rev_f65ddcf_0b063a2/rev_f65ddcf-0b063a2/src/main/java/com/alibaba/fastjson/parser/ParserConfig.java;<<<<<<< MINE
=======
        } catch (ASMException asmError) {
        	return new JavaBeanDeserializer(this, clazz);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Fastjson/revisions/rev_22e12be_162ae20/rev_22e12be-162ae20/src/main/java/com/alibaba/fastjson/serializer/SerializeWriter.java;<<<<<<< MINE
=======
        writeKeyWithDoubleQuote(text, true);
    }

    public void writeKeyWithDoubleQuote(String text, boolean checkSpecial) {
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Fastjson/revisions/rev_22e12be_162ae20/rev_22e12be-162ae20/src/test/java/com/alibaba/json/test/codec/FastjsonCodec.java;<<<<<<< MINE
=======
        out.config(SerializerFeature.DisableCircularReferenceDetect, true);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Fastjson/revisions/rev_162ae20_22e12be/rev_162ae20-22e12be/src/main/java/com/alibaba/fastjson/serializer/SerializeWriter.java;<<<<<<< MINE
=======
        writeKeyWithDoubleQuote(text, true);
    }

    public void writeKeyWithDoubleQuote(String text, boolean checkSpecial) {
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Fastjson/revisions/rev_162ae20_22e12be/rev_162ae20-22e12be/src/test/java/com/alibaba/json/test/codec/FastjsonCodec.java;<<<<<<< MINE
=======
        out.config(SerializerFeature.DisableCircularReferenceDetect, true);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Fastjson/revisions/rev_cc0428f_dee22f7/rev_cc0428f-dee22f7/src/main/java/com/alibaba/fastjson/parser/DefaultJSONParser.java;<<<<<<< MINE
=======
                    if (clazz == null) {
                        continue;
                    }
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Fastjson/revisions/rev_3c528ef_eb32b05/rev_3c528ef-eb32b05/src/main/java/com/alibaba/fastjson/parser/DefaultJSONParser.java;<<<<<<< MINE
=======
                } else if (ch == '{' || ch == '[') {
                    lexer.nextToken();
                    key = parse();
                    isObjectKey = true;
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Fastjson/revisions/rev_3c528ef_eb32b05/rev_3c528ef-eb32b05/src/main/java/com/alibaba/fastjson/parser/DefaultJSONParser.java;<<<<<<< MINE
=======
                } else if (ch == '{' || ch == '[') {
                    lexer.nextToken();
                    key = parse();
                    isObjectKey = true;
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Fastjson/revisions/rev_24d779e_3a5c953/rev_24d779e-3a5c953/src/main/java/com/alibaba/fastjson/parser/deserializer/DefaultObjectDeserializer.java;<<<<<<< MINE
=======
                        if (lexer.token() == JSONToken.RBRACE) {
                            lexer.nextToken(JSONToken.COMMA);
                            return map;
                        }
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Fastjson/revisions/rev_5df25cb_ebe948a/rev_5df25cb-ebe948a/src/main/java/com/alibaba/fastjson/parser/DefaultJSONParser.java;<<<<<<< MINE
=======
        this.lexer = lexer;
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Fastjson/revisions/rev_5df25cb_ebe948a/rev_5df25cb-ebe948a/src/main/java/com/alibaba/fastjson/parser/DefaultJSONParser.java;<<<<<<< MINE
=======

                    this.setContext(object, fieldName);

>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Fastjson/revisions/rev_5df25cb_ebe948a/rev_5df25cb-ebe948a/src/main/java/com/alibaba/fastjson/parser/deserializer/ListResolveFieldDeserializer.java;<<<<<<< MINE
=======
        this.parser = parser;
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Fastjson/revisions/rev_5df25cb_ebe948a/rev_5df25cb-ebe948a/src/main/java/com/alibaba/fastjson/JSON.java;<<<<<<< MINE
=======
        
        return size;
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Fastjson/revisions/rev_5df25cb_ebe948a/rev_5df25cb-ebe948a/src/test/java/com/alibaba/json/bvt/ArrayRefTest.java;<<<<<<< MINE
=======
        
        Assert.assertEquals(0, groups.get(0).getId());
        Assert.assertEquals(1, groups.get(1).getId());
        Assert.assertEquals(2, groups.get(2).getId());
        Assert.assertEquals(0, groups.get(3).getId());
        Assert.assertEquals(1, groups.get(4).getId());
        Assert.assertEquals(2, groups.get(5).getId());
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Fastjson/revisions/rev_12d54d2_7f38646/rev_12d54d2-7f38646/src/main/java/com/alibaba/fastjson/parser/DefaultJSONParser.java;<<<<<<< MINE
=======
            this(context, referenceValue, null, null);
        }

        public ResolveTask(ParseContext context, String referenceValue, ParseContext ownerContext,
                           FieldDeserializer fieldDeserializer){
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Fastjson/revisions/rev_ad6d97a_055aab7/rev_ad6d97a-055aab7/src/main/java/com/alibaba/fastjson/annotation/JSONType.java;<<<<<<< MINE
=======
    boolean asm() default true;

>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Fastjson/revisions/rev_55afa54_bd49960/rev_55afa54-bd49960/src/main/java/com/alibaba/fastjson/serializer/SerializeWriter.java;<<<<<<< MINE
=======
        writeStringWithDoubleQuote(text, seperator, true);
    }

    private void writeStringWithDoubleQuote(String text, final char seperator, boolean checkSpecial) {
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Fastjson/revisions/rev_55afa54_bd49960/rev_55afa54-bd49960/src/main/java/com/alibaba/fastjson/serializer/SerializeWriter.java;<<<<<<< MINE
=======
            if (ch >= 'a') {
                continue;
            }
            
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Fastjson/revisions/rev_3d572a0_90ae5a9/rev_3d572a0-90ae5a9/src/main/java/com/alibaba/fastjson/util/TypeUtils.java;<<<<<<< MINE
=======
                } else if (methodName.length()>=5 && Character.isUpperCase(methodName.charAt(4))){
                    propertyName = Introspector.decapitalize(methodName.substring(3));
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Fastjson/revisions/rev_69f677f_8af0afb/rev_69f677f-8af0afb/src/main/java/com/alibaba/fastjson/parser/deserializer/FieldDeserializer.java;<<<<<<< MINE
=======
                    if (value == null && fieldInfo.getFieldClass().isPrimitive()) {
                        return;
                    }
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Fastjson/revisions/rev_69f677f_8af0afb/rev_69f677f-8af0afb/src/main/java/com/alibaba/fastjson/parser/deserializer/JavaBeanDeserializer.java;<<<<<<< MINE
=======
        if (type == JSON.class || type == JSONObject.class) {
            return (T) parser.parse();
        }
        
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Fastjson/revisions/rev_969d52e_9f78225/rev_969d52e-9f78225/src/main/java/com/alibaba/fastjson/serializer/ASMSerializerFactory.java;<<<<<<< MINE
=======
                
                mw.visitVarInsn(ILOAD, context.var("i"));
                mw.visitMethodInsn(INVOKEVIRTUAL, SerializeWriter, "writeStringWithDoubleQuoteDirect",
                        "(Ljava/lang/String;I)V");
            } else {
                Label _first = new Label();
                mw.visitVarInsn(ILOAD, context.var("i"));
                mw.visitJumpInsn(IFEQ, _first); // i < list.size - 1
                
                mw.visitVarInsn(ALOAD, context.var("out"));
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Fastjson/revisions/rev_969d52e_9f78225/rev_969d52e-9f78225/src/main/java/com/alibaba/fastjson/serializer/ASMSerializerFactory.java;<<<<<<< MINE
=======
                mw.visitMethodInsn(INVOKEVIRTUAL, SerializeWriter, "write", "(I)V");
                
                mw.visitLabel(_first);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Fastjson/revisions/rev_9b6d748_e82a56a/rev_9b6d748-e82a56a/src/main/java/com/alibaba/fastjson/parser/deserializer/ThrowableDeserializer.java;<<<<<<< MINE
=======
        for (Map.Entry<String, Object> entry : otherValues.entrySet()) {
            String key = entry.getKey();
            Object value = entry.getValue();

            FieldDeserializer fieldDeserializer = this.getFieldDeserializer(key);
            if (fieldDeserializer != null) {
                fieldDeserializer.setValue(ex, value);
            }
        }

>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Storm/revisions/rev_4026463_f2b212e/rev_4026463-f2b212e/src/jvm/backtype/storm/serialization/SerializationFactory.java;<<<<<<< MINE
=======
        k.register(backtype.storm.metric.api.IMetricsConsumer.DataPoint.class);
        k.register(backtype.storm.metric.api.IMetricsConsumer.TaskInfo.class);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Storm/revisions/rev_6398179_7970fee/rev_6398179-7970fee/src/jvm/storm/trident/state/map/TransactionalMap.java;<<<<<<< MINE
=======
                changed = true;
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Storm/revisions/rev_6398179_7970fee/rev_6398179-7970fee/src/jvm/storm/trident/state/map/TransactionalMap.java;<<<<<<< MINE
=======
        _backing.reset();
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Storm/revisions/rev_6398179_7970fee/rev_6398179-7970fee/src/jvm/storm/trident/state/map/OpaqueMap.java;<<<<<<< MINE
=======
        _backing.reset();
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Storm/revisions/rev_6398179_7970fee/rev_6398179-7970fee/src/jvm/storm/trident/state/map/OpaqueMap.java;<<<<<<< MINE
=======
        _backing.reset();
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Vert.x-Core/revisions/rev_f1396aa_b015967/rev_f1396aa-b015967/vertx-testsuite/src/test/java/org/vertx/java/tests/core/filesystem/JavaFileSystemTest.java;<<<<<<< MINE
=======
  public void testTruncateExtendsFile() throws Exception {
    startTest(getMethodName());
  }

  @Test
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Vert.x-Core/revisions/rev_7d544f7_04e43e2/rev_7d544f7-04e43e2/src/main/java/io/vertx/core/VertxOptions.java;<<<<<<< MINE
=======
    this.warningExceptionTime = other.warningExceptionTime;
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Vert.x-Core/revisions/rev_7d544f7_04e43e2/rev_7d544f7-04e43e2/src/main/java/io/vertx/core/VertxOptions.java;<<<<<<< MINE
=======
    this.warningExceptionTime = json.getLong("warningExceptionTime", DEFAULT_WARNING_EXECPTION_TIME);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Vert.x-Core/revisions/rev_7d544f7_04e43e2/rev_7d544f7-04e43e2/src/main/java/io/vertx/core/VertxOptions.java;<<<<<<< MINE
=======
    if (warningExceptionTime != that.warningExceptionTime) return false;
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Vert.x-Core/revisions/rev_7d544f7_04e43e2/rev_7d544f7-04e43e2/src/main/java/io/vertx/core/VertxOptions.java;<<<<<<< MINE
=======
    result = 31 * result + (int) (warningExceptionTime ^ (warningExceptionTime >>> 32));
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Vert.x-Core/revisions/rev_7d544f7_04e43e2/rev_7d544f7-04e43e2/src/test/java/io/vertx/test/core/VertxOptionsTest.java;<<<<<<< MINE
=======

    try {
      options.setWarningExceptionTime(-1);
      fail("Should throw exception");
    } catch (IllegalArgumentException e) {
      // OK
    }
    assertEquals(options, options.setWarningExceptionTime(1000000000l));
    assertEquals(1000000000l, options.getWarningExceptionTime());
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Vert.x-Core/revisions/rev_7d544f7_04e43e2/rev_7d544f7-04e43e2/src/test/java/io/vertx/test/core/VertxOptionsTest.java;<<<<<<< MINE
=======
    options.setWarningExceptionTime(warningExceptionTime);
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Vert.x-Core/revisions/rev_7d544f7_04e43e2/rev_7d544f7-04e43e2/src/test/java/io/vertx/test/core/VertxOptionsTest.java;<<<<<<< MINE
=======
    assertEquals(warningExceptionTime, options.getWarningExceptionTime());
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Vert.x-Core/revisions/rev_7d544f7_04e43e2/rev_7d544f7-04e43e2/src/test/java/io/vertx/test/core/VertxOptionsTest.java;<<<<<<< MINE
=======
    assertEquals(def.getWarningExceptionTime(), json.getWarningExceptionTime());
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Vert.x-Core/revisions/rev_7d544f7_04e43e2/rev_7d544f7-04e43e2/src/test/java/io/vertx/test/core/VertxOptionsTest.java;<<<<<<< MINE
=======
    assertEquals(5000000000l, options.getWarningExceptionTime());
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Vert.x-Core/revisions/rev_7d544f7_04e43e2/rev_7d544f7-04e43e2/src/test/java/io/vertx/test/core/VertxOptionsTest.java;<<<<<<< MINE
=======
        put("warningExceptionTime", warningExceptionTime).
>>>>>>> YOURS
/home/paper219/Desktop/analysis/demonstration/projects/Vert.x-Core/revisions/rev_7d544f7_04e43e2/rev_7d544f7-04e43e2/src/test/java/io/vertx/test/core/VertxOptionsTest.java;<<<<<<< MINE
=======
    assertEquals(warningExceptionTime, options.getWarningExceptionTime());
>>>>>>> YOURS
